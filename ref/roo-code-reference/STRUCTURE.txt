roo-code-reference/
│
├── INDEX.md                                # 📖 参考代码索引
├── README.md                               # 📖 使用说明
├── STRUCTURE.txt                           # 📄 本文件 - 目录结构
├── AI-Provider-Integration-Plan.md        # 🎯 技术方案（含8大设计哲学 - 必读）
├── IMPLEMENTATION_ROADMAP.md               # 🗓️ 6周实施路线图
│
│   ✨ 8大设计理念：容错优先、成本透明、高扩展性、灵活配置、
│      性能优化、智能适配、安全合规、可观测性
│
├── packages/
│   └── types/
│       └── src/
│           ├── model.ts                    # ⭐ 核心：ModelInfo 类型定义
│           └── providers/                  # 各供应商静态模型数据
│               ├── anthropic.ts            # Claude 系列模型
│               ├── bedrock.ts              # AWS Bedrock 模型
│               ├── deepseek.ts             # DeepSeek 模型（超低价）
│               ├── gemini.ts               # Google Gemini 模型
│               ├── openai.ts               # OpenAI GPT 系列
│               └── openrouter.ts           # OpenRouter 聚合器
│
├── src/
│   ├── api/
│   │   └── providers/                      # Provider 实现（翻译项目推荐）
│   │       ├── base-provider.ts            # ⭐ 核心：Provider 抽象基类
│   │       ├── openai-native.ts            # ⭐⭐⭐ OpenAI 实现（推荐）
│   │       ├── deepseek.ts                 # ⭐⭐⭐ DeepSeek 实现（推荐）
│   │       ├── gemini.ts                   # ⭐⭐ Gemini 实现（可选）
│   │       ├── ollama.ts                   # ⭐⭐ Ollama 本地实现（可选）
│   │       ├── anthropic.ts                # （学习参考，非必需）
│   │       ├── openrouter.ts               # （学习参考）
│   │       ├── router-provider.ts          # （学习参考）
│   │       └── fetchers/                   # 动态模型获取
│   │           ├── litellm.ts              # LiteLLM 模型列表获取
│   │           ├── modelCache.ts           # ⭐ 核心：双层缓存机制
│   │           ├── ollama.ts               # Ollama 模型列表获取
│   │           └── openrouter.ts           # OpenRouter 模型列表获取
│   │
│   └── shared/                             # 共享工具
│       ├── cost.ts                         # ⭐ 核心：成本计算逻辑
│       └── getApiMetrics.ts                # Token 统计汇总
│
└── webview-ui/
    └── src/
        └── components/                     # React UI 组件
            ├── chat/
            │   └── TaskHeader.tsx          # 实时成本显示组件
            └── history/
                └── TaskItemFooter.tsx      # 历史记录成本展示


═══════════════════════════════════════════════════════════════════════════════

📊 文件统计

文档（5个文件）:
  📖 INDEX.md                              - 参考代码索引与快速导航
  📖 README.md                             - 使用说明与学习路径
  📄 STRUCTURE.txt                         - 本文件 - 目录结构
  🎯 AI-Provider-Integration-Plan.md       - 完整技术方案与架构设计（必读）
  🗓️ IMPLEMENTATION_ROADMAP.md             - 6周实施路线图与详细任务清单

核心文件（必读）:
  ⭐ packages/types/src/model.ts           - ModelInfo 类型定义（363行）
  ⭐ src/shared/cost.ts                    - 成本计算核心逻辑
  ⭐ src/api/providers/base-provider.ts    - Provider 抽象基类

类型定义（6个文件）:
  packages/types/src/providers/*.ts        - 各供应商静态模型数据

Provider 实现（8个文件）:
  src/api/providers/*.ts                   - 具体供应商实现

工具类（5个文件）:
  src/api/providers/fetchers/*.ts          - 动态模型获取与缓存
  src/shared/*.ts                          - 成本计算与统计

UI 组件（2个文件）:
  webview-ui/src/components/**/*.tsx       - 成本显示界面

总计: 27 个文件（5个文档 + 22个代码文件）

═══════════════════════════════════════════════════════════════════════════════

🎯 快速导航

0. 🌟 第一步：了解整体架构
   → 必读: AI-Provider-Integration-Plan.md（完整技术方案）

1. 想了解数据结构？
   → 查看: packages/types/src/model.ts

2. 想实现成本计算？
   → 查看: src/shared/cost.ts

3. 想实现一个 Provider？（翻译项目推荐）
   → 先看: src/api/providers/base-provider.ts（基类）
   → 再看: src/api/providers/openai-native.ts（推荐）
   → 然后: src/api/providers/deepseek.ts（中文优化）
   → （可选）src/api/providers/anthropic.ts（学习参考）

4. 想实现模型缓存？
   → 查看: src/api/providers/fetchers/modelCache.ts

5. 想实现成本显示UI？
   → 查看: webview-ui/src/components/chat/TaskHeader.tsx

═══════════════════════════════════════════════════════════════════════════════

📚 推荐阅读顺序

第0步: ✨ 先看设计哲学 → AI-Provider-Integration-Plan.md#设计哲学
       理解8大设计理念：容错、成本、扩展、配置、性能、智能、安全、观测

第1步: AI-Provider-Integration-Plan.md     - 理解整体架构（必读）
第2步: IMPLEMENTATION_ROADMAP.md           - 查看6周实施计划（执行指南）
第3步: INDEX.md                            - 了解代码布局
第4步: packages/types/src/model.ts         - 掌握数据结构
第5步: src/shared/cost.ts                  - 学习成本计算
第6步: src/api/providers/openai-native.ts  - 学习完整实现
